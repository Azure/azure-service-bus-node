### YamlMime:UniversalReference
items:
  - uid: '@azure/event-hubs.EventHubClient'
    name: EventHubClient
    fullName: EventHubClient
    children:
      - '@azure/event-hubs.EventHubClient.close'
      - '@azure/event-hubs.EventHubClient.connectionId'
      - '@azure/event-hubs.EventHubClient.createFromAadTokenCredentials'
      - '@azure/event-hubs.EventHubClient.createFromConnectionString'
      - '@azure/event-hubs.EventHubClient.createFromIotHubConnectionString'
      - '@azure/event-hubs.EventHubClient.createFromTokenProvider'
      - '@azure/event-hubs.EventHubClient.constructor'
      - '@azure/event-hubs.EventHubClient.eventhubName'
      - '@azure/event-hubs.EventHubClient.getHubRuntimeInformation'
      - '@azure/event-hubs.EventHubClient.getPartitionIds'
      - '@azure/event-hubs.EventHubClient.getPartitionInformation'
      - '@azure/event-hubs.EventHubClient.receive'
      - '@azure/event-hubs.EventHubClient.receiveBatch'
      - '@azure/event-hubs.EventHubClient.send'
      - '@azure/event-hubs.EventHubClient.sendBatch'
    langs:
      - typeScript
    type: class
    summary: ''
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Closes the AMQP connection to the Event Hub for this client,
      returning a promise that will be resolved when disconnection is completed.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.connectionId'
    name: connectionId
    fullName: connectionId
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {string} [connectionId] The amqp connection id that uniquely identifies
      the connection within a process.
    optional: true
    syntax:
      content: 'connectionId?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.createFromAadTokenCredentials'
    name: >-
      createFromAadTokenCredentials(string, string, ApplicationTokenCredentials
      | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials,
      ClientOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates an EventHub Client from AADTokenCredentials.
    syntax:
      content: >-
        static function createFromAadTokenCredentials(host: string, entityPath:
        string, credentials: ApplicationTokenCredentials | UserTokenCredentials
        | DeviceTokenCredentials | MSITokenCredentials, options?:
        ClientOptionsBase)
      parameters:
        - id: host
          type:
            - string
          description: |-
            Fully qualified domain name for Event Hubs. Most likely,
            <yournamespace>.servicebus.windows.net
        - id: entityPath
          type:
            - string
          description: EventHub path of the form 'my-event-hub-name'
        - id: credentials
          type:
            - >-
              ApplicationTokenCredentials | UserTokenCredentials |
              DeviceTokenCredentials | MSITokenCredentials
          description: >-
            The AAD Token credentials. It can be one of the following:

            ApplicationTokenCredentials | UserTokenCredentials |
            DeviceTokenCredentials | MSITokenCredentials.
        - id: options
          type:
            - '@azure/event-hubs.ClientOptionsBase'
          description: The options that can be provided during client creation.
          optional: true
      return:
        type:
          - '@azure/event-hubs.EventHubClient'
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.createFromConnectionString'
    name: 'createFromConnectionString(string, undefined | string, ClientOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates an EventHub Client from connection string.
    syntax:
      content: >-
        static function createFromConnectionString(connectionString: string,
        path?: undefined | string, options?: ClientOptions)
      parameters:
        - id: connectionString
          type:
            - string
          description: >-
            Connection string of the form
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key'
        - id: path
          type:
            - undefined | string
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/event-hubs.ClientOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/event-hubs.EventHubClient'
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.createFromIotHubConnectionString'
    name: 'createFromIotHubConnectionString(string, ClientOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates an EventHub Client from connection string.
    syntax:
      content: >-
        static function createFromIotHubConnectionString(iothubConnectionString:
        string, options?: ClientOptions)
      parameters:
        - id: iothubConnectionString
          type:
            - string
          description: >-
            Connection string of the form
            'HostName=iot-host-name;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key'
        - id: options
          type:
            - '@azure/event-hubs.ClientOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/event-hubs.EventHubClient>
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.createFromTokenProvider'
    name: 'createFromTokenProvider(string, string, TokenProvider, ClientOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates an EventHub Client from a generic token provider.
    syntax:
      content: >-
        static function createFromTokenProvider(host: string, entityPath:
        string, tokenProvider: TokenProvider, options?: ClientOptionsBase)
      parameters:
        - id: host
          type:
            - string
          description: |-
            Fully qualified domain name for Event Hubs. Most likely,
            <yournamespace>.servicebus.windows.net
        - id: entityPath
          type:
            - string
          description: EventHub path of the form 'my-event-hub-name'
        - id: tokenProvider
          type:
            - TokenProvider
          description: Your token provider that implements the TokenProvider interface.
        - id: options
          type:
            - '@azure/event-hubs.ClientOptionsBase'
          description: The options that can be provided during client creation.
          optional: true
      return:
        type:
          - '@azure/event-hubs.EventHubClient'
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.constructor'
    name: 'EventHubClient(EventHubConnectionConfig, ClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Instantiates a client pointing to the Event Hub given by this
      configuration.
    syntax:
      content: >-
        new EventHubClient(config: EventHubConnectionConfig, options?:
        ClientOptions)
      parameters:
        - id: config
          type:
            - EventHubConnectionConfig
          description: The connection configuration to create the EventHub Client.
        - id: options
          type:
            - '@azure/event-hubs.ClientOptions'
          description: |
            The optional parameters that can be provided to the EventHub
            Client constructor.
          optional: true
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.eventhubName'
    name: eventhubName
    fullName: eventhubName
    children: []
    langs:
      - typeScript
    type: property
    summary: '{string} eventhubName The name of the Eventhub.'
    syntax:
      content: 'eventhubName: string'
      return:
        type:
          - string
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.getHubRuntimeInformation'
    name: getHubRuntimeInformation()
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides the eventhub runtime information.
    syntax:
      content: function getHubRuntimeInformation()
      parameters: []
      return:
        type:
          - Promise<@azure/event-hubs.EventHubRuntimeInformation>
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.getPartitionIds'
    name: getPartitionIds()
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides an array of partitionIds.
    syntax:
      content: function getPartitionIds()
      parameters: []
      return:
        type:
          - Promise<Array<string>>
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.getPartitionInformation'
    name: getPartitionInformation(string | number)
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides information about the specified partition.
    syntax:
      content: 'function getPartitionInformation(partitionId: string | number)'
      parameters:
        - id: partitionId
          type:
            - string | number
          description: Partition ID for which partition information is required.
      return:
        type:
          - Promise<@azure/event-hubs.EventHubPartitionRuntimeInformation>
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.receive'
    name: 'receive(string | number, OnMessage, OnError, ReceiveOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Starts the receiver by establishing an AMQP session and an AMQP receiver
      link on the session. Messages will be passed to

      the provided onMessage handler and error will be passed to the provided
      onError handler.
    syntax:
      content: >-
        function receive(partitionId: string | number, onMessage: OnMessage,
        onError: OnError, options?: ReceiveOptions)
      parameters:
        - id: partitionId
          type:
            - string | number
          description: Partition ID from which to receive.
        - id: onMessage
          type:
            - '@azure/event-hubs.OnMessage'
          description: The message handler to receive event data objects.
        - id: onError
          type:
            - '@azure/event-hubs.OnError'
          description: |-
            The error handler to receive an error that occurs
            while receiving messages.
        - id: options
          type:
            - '@azure/event-hubs.ReceiveOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/event-hubs.ReceiveHandler'
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.receiveBatch'
    name: 'receiveBatch(string | number, number, undefined | number, ReceiveOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Receives a batch of EventData objects from an EventHub partition for a
      given count and a given max wait time in seconds, whichever

      happens first. This method can be used directly after creating the
      receiver object and **MUST NOT** be used along with the `start()` method.
    syntax:
      content: >-
        function receiveBatch(partitionId: string | number, maxMessageCount:
        number, maxWaitTimeInSeconds?: undefined | number, options?:
        ReceiveOptions)
      parameters:
        - id: partitionId
          type:
            - string | number
          description: Partition ID from which to receive.
        - id: maxMessageCount
          type:
            - number
          description: The maximum message count. Must be a value greater than 0.
        - id: maxWaitTimeInSeconds
          type:
            - undefined | number
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/event-hubs.ReceiveOptions'
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/event-hubs.EventData[]>'
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.send'
    name: 'send(EventData, string | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sends the given message to the EventHub.
    syntax:
      content: 'function send(data: EventData, partitionId?: string | number)'
      parameters:
        - id: data
          type:
            - '@azure/event-hubs.EventData'
          description: Message to send.  Will be sent as UTF8-encoded JSON string.
        - id: partitionId
          type:
            - string | number
          description: ''
          optional: true
      return:
        type:
          - Promise<Delivery>
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.sendBatch'
    name: 'sendBatch(EventData[], string | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Send a batch of EventData to the EventHub. The "message_annotations",
      "application_properties" and "properties"

      of the first message will be set as that of the envelope (batch message).
    syntax:
      content: 'function sendBatch(datas: EventData[], partitionId?: string | number)'
      parameters:
        - id: datas
          type:
            - '@azure/event-hubs.EventData[]'
          description: An array of EventData objects to be sent in a Batch message.
        - id: partitionId
          type:
            - string | number
          description: ''
          optional: true
      return:
        type:
          - Promise<Delivery>
    package: '@azure/event-hubs'
references:
  - uid: '@azure/event-hubs.ClientOptions'
    name: ClientOptions
    spec.typeScript:
      - name: ClientOptions
        fullName: ClientOptions
        uid: '@azure/event-hubs.ClientOptions'
  - uid: Promise<@azure/event-hubs.EventHubRuntimeInformation>
    name: EventHubRuntimeInformation>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: EventHubRuntimeInformation
        fullName: EventHubRuntimeInformation
        uid: '@azure/event-hubs.EventHubRuntimeInformation'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/event-hubs.EventHubPartitionRuntimeInformation>
    name: EventHubPartitionRuntimeInformation>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: EventHubPartitionRuntimeInformation
        fullName: EventHubPartitionRuntimeInformation
        uid: '@azure/event-hubs.EventHubPartitionRuntimeInformation'
      - name: '>'
        fullName: '>'
  - uid: '@azure/event-hubs.OnMessage'
    name: OnMessage
    spec.typeScript:
      - name: OnMessage
        fullName: OnMessage
        uid: '@azure/event-hubs.OnMessage'
  - uid: '@azure/event-hubs.OnError'
    name: OnError
    spec.typeScript:
      - name: OnError
        fullName: OnError
        uid: '@azure/event-hubs.OnError'
  - uid: '@azure/event-hubs.ReceiveOptions'
    name: ReceiveOptions
    spec.typeScript:
      - name: ReceiveOptions
        fullName: ReceiveOptions
        uid: '@azure/event-hubs.ReceiveOptions'
  - uid: '@azure/event-hubs.ReceiveHandler'
    name: ReceiveHandler
    spec.typeScript:
      - name: ReceiveHandler
        fullName: ReceiveHandler
        uid: '@azure/event-hubs.ReceiveHandler'
  - uid: 'Promise<@azure/event-hubs.EventData[]>'
    name: 'EventData[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: EventData
        fullName: EventData
        uid: '@azure/event-hubs.EventData'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/event-hubs.EventData'
    name: EventData
    spec.typeScript:
      - name: EventData
        fullName: EventData
        uid: '@azure/event-hubs.EventData'
  - uid: '@azure/event-hubs.EventData[]'
    name: 'EventData[]'
    spec.typeScript:
      - name: EventData
        fullName: EventData
        uid: '@azure/event-hubs.EventData'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/event-hubs.ClientOptionsBase'
    name: ClientOptionsBase
    spec.typeScript:
      - name: ClientOptionsBase
        fullName: ClientOptionsBase
        uid: '@azure/event-hubs.ClientOptionsBase'
  - uid: '@azure/event-hubs.EventHubClient'
    name: EventHubClient
    spec.typeScript:
      - name: EventHubClient
        fullName: EventHubClient
        uid: '@azure/event-hubs.EventHubClient'
  - uid: Promise<@azure/event-hubs.EventHubClient>
    name: EventHubClient>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: EventHubClient
        fullName: EventHubClient
        uid: '@azure/event-hubs.EventHubClient'
      - name: '>'
        fullName: '>'
